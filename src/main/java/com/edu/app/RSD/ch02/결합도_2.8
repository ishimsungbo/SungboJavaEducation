* 결합도
한 기능이 다른 클래스에얼마나 의존하고 있는지를 가름한다.

예) 시계
 시계를 생각하면 결합도를 쉽게 이해할 수 있다. 시계가 어떻게 동작하는지 몰라도 시간을 알
아내는 데 문제가 없다. 즉 사람은 시계 내부 구조에 의존하지 않기 때문이다.
 따라서 시계 내부 구조를 바꾸더라도 사람이 시계를 읽는 데 영향을 받지 않는다.
  이는 두 가지 임무인 인터페이스와 구현이 서로 결합되지(decoupled) 않았기 때문이다.

  예) CSV = > JSON 으로 된 거내 내역을 파싱해야 된다면 어떻게 할까?

  *****
  ==> 바뀌는 부분은 인터페이스화를 한다.
  *****

  기존

  * 높은 결합도   :  BankStatementAnalyzer => BankStatementCSVParser

  * 낮은 결합도   :  BankStatementAnalyzer ----------> <<BankStatementParser>> <---------- BankStatementCSVParser
     인터페이스 BankStatementParser 을 만듬으로 결합도를 낮춘다. JSON 포맷으로 변경되면 BankStatementCSVParserJson을 만들어서 제공하면 된다.